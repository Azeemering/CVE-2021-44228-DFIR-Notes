Useful Splunk searches for detection of CVE-2021-44228

First I created a rudamentary search based upon a search I found in https://www.splunk.com/en_us/blog/security/log-jammin-log4j-2-rce.html
My next step will be adding better detections because attackers have added obfuscation to these requests to evade detections based on request patterns.
Weâ€™ve seen things like running a lower or upper command within the exploitation string ({jndi:${lower:l}${lower:d}a${lower:p})
and even more complicated obfuscation attempts (${${::-j}${::-n}${::-d}${::-i}) that are all trying to bypass string-matching detections.
Watch this space for more updates when I add these detections too.


- CVE-2021-44228_Scanning_Domains_Lookup
Find all scanning attempts then extract the top level domains and create a lookup table with these domains as input values:

index=*  jndi | rex field=_raw max_match=0 "[jJnNdDiI]{4}(\:|\%3A|\/|\%2F)(?<proto>\w+)(\:\/\/|\%3A\%2F\%2F)(\$\{.*?\}(\.)?)?(?<rce_dest>[a-zA-Z0-9\.\-\_\$\{\:]+)" 
| mvexpand rce_dest 
| rex field=rce_dest "(?<rce_ip>\d+\.\d+\.\d+\.\d+)" 
| eval rce_domain = case(isnull(rce_ip),rce_dest) 
| rex field=rce_domain "(?<top_level_domain>[0-9a-zA-A\-]+\.[0-9a-zA-A\-]+$)" 
| dedup top_level_domain 
| eval top_level_domain = "*.".top_level_domain 
| where top_level_domain!=""
| lookup log4j_scanning_domain.csv query as top_level_domain OUTPUT query AS old_query
| where isnull(old_query) 
| search top_level_domain!=*.schiphol.nl OR top_level_domain!="*.*." 
| rename top_level_domain as query 
| search query!="*.[redacted].nl"  query!="*.*." 
| table  query   
| outputlookup append=t log4j_scanning_domain.csv



- CVE-2021-44228_Outgoing_DNS_Detection
Second search uses above created lookup to hold against our outgoing DNS traffic:

| tstats summariesonly=true allow_old_summaries=true
      values(host) as host, values(DNS.query_type) as DNS.query_type, values(DNS.reply_code) as DNS.reply_code, values(DNS.transport) as DNS.transport
      count from datamodel=Network_Resolution.DNS
      where [| inputlookup log4j_scanning_domain.csv | rename query as DNS.query | format] 
      by "DNS.src",sourcetype, DNS.query index _time span=1s
| stats earliest(_time) as first_seen, latest(_time) as last_seen sum(count) as count, values(DNS.reply_code) as DNS.reply_code, values(index) as index, values(DNS.src) as DNS.src, values(DNS.query_type) as DNS.query_type, values(DNS.transport) as DNS.transport by host DNS.query sourcetype
| convert timeformat="%m/%d/%Y %H:%M:%S" ctime(first_seen), ctime(last_seen)

- CVE-2021-44288_callbackservers_append
Next I want to add more IOCs to match against our outgoing network traffic.
There is a good list of callback servers shared by Greynoise: https://gist.github.com/superducktoes/9b742f7b44c71b4a0d19790228ce85d8.
I use this for input data.
But I need to do some Splunk-Fu to create a good field value that matches against our Network traffic datamodel:

| inputlookup CVE-2021-44288_callbackservers.csv
| rex field=servers "ldap://(?<ip1>(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})"
| eval query="*".ip1
| eval query=query."*"
| stats c by query
| outputlookup append=t log4j_scanning_domain.csv

The search extracts ip addresses from the IOC lookup and concatenates a * in front and after the ip values. Example *134.209.163.248*
This can nw be matched against our outgoing DNS traffic in the second search I provided earlier.



